/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Validator, ValidatorEntry } from "./validators";
export { Validator, ValidatorEntry } from "./validators";
export namespace Components {
    interface GcdsAlert {
        /**
          * Defines alert role.
         */
        "alertRole"?: 'danger' | 'info' | 'success' | 'warning';
        /**
          * Defines the max width of the alert content.
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Callback when the close button is clicked.
         */
        "dismissHandler": Function;
        /**
          * Defines the alert heading.
         */
        "heading": string;
        /**
          * Defines if the alert's close button is displayed or not.
         */
        "hideCloseBtn"?: boolean;
        /**
          * Defines if the alert's role icon is displayed or not.
         */
        "hideRoleIcon"?: boolean;
        /**
          * Defines if the alert's position is fixed.
         */
        "isFixed"?: boolean;
    }
    interface GcdsBreadcrumbs {
        /**
          * Defines if the default canada.ca link is displayed or omitted.
         */
        "hideCanadaLink": boolean;
    }
    interface GcdsBreadcrumbsItem {
        /**
          * Specifies the href of the breadcrumb item.
         */
        "href": string | undefined;
    }
    interface GcdsButton {
        /**
          * Custom callback function on blur event
         */
        "blurHandler": Function;
        /**
          * The buttonId attribute specifies the id for a <button> element.
         */
        "buttonId": string;
        /**
          * Set the main style
         */
        "buttonRole": | 'primary'
    | 'secondary'
    | 'danger'
    | 'skip-to-content';
        /**
          * Set the style variant
         */
        "buttonStyle": 'solid' | 'text-only';
        /**
          * Custom callback function on click event
         */
        "clickHandler": Function;
        /**
          * The disabled attribute for a <button> element.
         */
        "disabled": boolean;
        /**
          * The download attribute specifies that the target (the file specified in the href attribute) will be downloaded when a user clicks on the hyperlink
         */
        "download": string | undefined;
        /**
          * Focus element
         */
        "focusElement": () => Promise<void>;
        /**
          * Custom callback function on focus event
         */
        "focusHandler": Function;
        /**
          * The href attribute specifies the URL of the page the link goes to
         */
        "href": string | undefined;
        /**
          * The name attribute specifies the name for a <button> element.
         */
        "name": string | undefined;
        /**
          * The rel attribute specifies the relationship between the current document and the linked document
         */
        "rel": string | undefined;
        /**
          * Set the button size
         */
        "size": 'regular' | 'small';
        /**
          * The target attribute specifies where to open the linked document
         */
        "target": string | undefined;
        /**
          * Set button types
         */
        "type": 'submit' | 'reset' | 'button' | 'link';
    }
    interface GcdsCard {
        /**
          * The card title attribute specifies the title that appears on the card
         */
        "cardTitle": string;
        /**
          * The description attribute specifies the body of text that appears on the card
         */
        "description": string;
        /**
          * The href attribute specifies the URL of the page the link goes to
         */
        "href": string;
        /**
          * The img alt attribute specifies the alt text for the image provided, if none, image will be decorative
         */
        "imgAlt": string;
        /**
          * The img src attribute specifies the path to the image
         */
        "imgSrc": string;
        /**
          * The tag attribute specifies the tag text that appears above the card title
         */
        "tag": string;
        /**
          * The title element attribute specifies HTML element the title renders as
         */
        "titleElement": 'h3' | 'h4' | 'h5' | 'h6' | 'a';
        /**
          * The type attribute specifies how the card renders as a link
         */
        "type": 'link' | 'action';
    }
    interface GcdsCheckbox {
        /**
          * Custom callback function on blur event
         */
        "blurHandler": Function;
        /**
          * Id attribute for an input element.
         */
        "checkboxId": string;
        /**
          * Specifies if an input element is checked.
         */
        "checked": boolean;
        /**
          * Custom callback function on click event
         */
        "clickHandler": Function;
        /**
          * Specifies if an input element is disabled or not.
         */
        "disabled": boolean;
        /**
          * Error message for an invalid input element.
         */
        "errorMessage": string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler": Function;
        /**
          * Hint displayed below the label.
         */
        "hint": string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Name attribute for an input element.
         */
        "name": string;
        /**
          * Specifies if a form field is required or not.
         */
        "required": boolean;
        /**
          * Call any active validators
         */
        "validate": () => Promise<void>;
        /**
          * Set event to call validator
         */
        "validateOn": 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator": Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Value for an input element.
         */
        "value": string;
    }
    interface GcdsContainer {
        /**
          * Defines if container has a border or not.
         */
        "border"?: boolean;
        /**
          * Defines if container is centered or not.
         */
        "centered"?: boolean;
        /**
          * Defines the container's margin. Note that left and right margin will not be applied if the container is centered.
         */
        "margin"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Defines the container's padding.
         */
        "padding"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Defines container size.
         */
        "size"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Set tag for container.
         */
        "tag"?: string;
    }
    interface GcdsDateModified {
        /**
          * Set date modified type. Default is date.
         */
        "type": 'date' | 'version';
    }
    interface GcdsDetails {
        /**
          * The details title summarizes the panel content.
         */
        "detailsTitle": string;
        /**
          * Defines if the details panel is open by default or not.
         */
        "open"?: boolean;
    }
    interface GcdsErrorMessage {
        /**
          * Error message for an invalid form field.
         */
        "message": string;
        /**
          * Id attribute for the error message.
         */
        "messageId": string;
    }
    interface GcdsErrorSummary {
        /**
          * Object of list items for error list. Format: { link-href: link-label }
         */
        "errorLinks": string | object;
        /**
          * Set error summary heading
         */
        "heading"?: string;
        /**
          * Specifies if the error summary should listen for GcdsError event to generate error list.
         */
        "listen"?: boolean;
    }
    interface GcdsFieldset {
        /**
          * Flag to disable fieldset and its contents
         */
        "disabled": boolean;
        /**
          * Error message for invalid form elements in group.
         */
        "errorMessage": string;
        /**
          * The unique identifier for the component
         */
        "fieldsetId": string;
        /**
          * Hint displayed below the legend.
         */
        "hint": string;
        /**
          * The title for the contents of the fieldset
         */
        "legend": string;
        /**
          * Flag the contents are required
         */
        "required": boolean;
        /**
          * Call any active validators
         */
        "validate": () => Promise<void>;
        /**
          * Set event to call validator
         */
        "validateOn": 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator": Array<
    string | ValidatorEntry | Validator<string>
  >;
    }
    interface GcdsFileUploader {
        /**
          * Defines the file types the file uploader accepts.
         */
        "accept": string;
        /**
          * Custom callback function on blur event
         */
        "blurHandler": Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler": Function;
        /**
          * Specifies if a file uploader element is disabled or not.
         */
        "disabled": boolean;
        /**
          * Error message for an invalid file uploader element.
         */
        "errorMessage": string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler": Function;
        /**
          * Hint displayed below the label.
         */
        "hint": string;
        /**
          * Form field label.
         */
        "label": string;
        /**
          * Boolean that specifies if the user is allowed to select more than one file.
         */
        "multiple": boolean;
        /**
          * Specifies if a form field is required or not.
         */
        "required": boolean;
        /**
          * Id attribute for a file uploader element.
         */
        "uploaderId": string;
        /**
          * Call any active validators
         */
        "validate": () => Promise<void>;
        /**
          * Set event to call validator
         */
        "validateOn": 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator": Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Value for a file uploader element.
         */
        "value": string[];
    }
    interface GcdsFooter {
        /**
          * Heading for contextual slot and nav landmark
         */
        "contextualHeading": string;
        /**
          * Object of list items for contextual band. Format: { link-label: link-href }
         */
        "contextualLinks": string | object;
        /**
          * Display mode of the footer
         */
        "display"?: 'compact' | 'full';
        /**
          * Object of list items for sub-footer. Format: { link-label: link-href }
         */
        "subLinks": string | object;
        /**
          * GcdsSignature - The variant of the Government of Canada wordmark
         */
        "wordmarkVariant": 'colour' | 'white';
    }
    interface GcdsGrid {
        /**
          * If total grid size is less than the size of its grid container, this property aligns the grid along the block (column) axis
         */
        "alignContent"?: | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly'
    | 'start'
    | 'stretch';
        /**
          * Aligns grid items along the block (column) axis
         */
        "alignItems"?: 'baseline' | 'center' | 'end' | 'start' | 'stretch';
        /**
          * Defines if grid container is centered or not
         */
        "centered"?: boolean;
        /**
          * Defines the columns of the grid Option to set different layouts for desktop | tablet | default (includes mobile)
         */
        "columns": string;
        "columnsDesktop"?: string;
        "columnsTablet"?: string;
        /**
          * Defines grid container size
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Defines element as grid or inline-grid container
         */
        "display"?: 'grid' | 'inline-grid';
        /**
          * Shorthand for column-gap + row-gap Specifies the width of the gutters between columns and rows
         */
        "gap"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * If total grid size is less than the size of its grid container, this property aligns the grid along the inline (row) axis
         */
        "justifyContent"?: | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly'
    | 'start'
    | 'stretch';
        /**
          * Aligns grid items along the inline (row) axis
         */
        "justifyItems"?: 'center' | 'end' | 'start' | 'stretch';
        /**
          * Sets both the align-content + justify-content properties
         */
        "placeContent"?: | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly'
    | 'start'
    | 'stretch';
        /**
          * Sets both the align-items + justify-items properties
         */
        "placeItems"?: 'center' | 'end' | 'start' | 'stretch';
        /**
          * Set tag for grid container
         */
        "tag"?: string;
    }
    interface GcdsHeader {
        /**
          * GcdsLangToggle - The href attribute specifies the URL of the opposite language page
         */
        "langHref": string;
        /**
          * GcdsSignature - GCDS signature links to Canada.ca
         */
        "signatureHasLink": boolean;
        /**
          * GcdsSignature - The variant of the Government of Canada signature
         */
        "signatureVariant": | 'colour'
    | 'white';
        /**
          * Top navigation - Skip to content href
         */
        "skipToHref": string;
    }
    interface GcdsHeading {
        /**
          * Sets the line length to a maximum amount of characters per line for each heading level, ensuring a comfortable, accessible reading length.
         */
        "characterLimit"?: boolean;
        /**
          * Adds margin below the heading.
         */
        "marginBottom"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Adds margin above the heading.
         */
        "marginTop"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Sets the appropriate HTML tag for the selected level.
         */
        "tag": 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface GcdsHint {
        /**
          * Hint displayed below the label and above the input field.
         */
        "hint"?: string;
        /**
          * Id attribute for the hint.
         */
        "hintId": string;
    }
    interface GcdsIcon {
        /**
          * If the icon should render as a fixed-width square, or their natural width.
         */
        "fixedWidth": boolean;
        /**
          * Style of the icon. 'regular' icons are outlined. Some icons have 'solid' variation.
         */
        "iconStyle"?: 'regular' | 'solid';
        /**
          * Add icon description.
         */
        "label"?: string;
        /**
          * Add margin to the left of the icon
         */
        "marginLeft"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Add margin to the right of the icon
         */
        "marginRight"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Name of the icon.
         */
        "name": string;
        /**
          * Defines the size of the icon.
         */
        "size"?: | 'inherit'
    | 'caption'
    | 'text'
    | 'h6'
    | 'h5'
    | 'h4'
    | 'h3'
    | 'h2'
    | 'h1';
    }
    interface GcdsInput {
        /**
          * String to have autocomplete enabled
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Custom callback function on blur event
         */
        "blurHandler": Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler": Function;
        /**
          * Specifies if an input element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid input element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler": Function;
        /**
          * Specifies if the label is hidden or not.
         */
        "hideLabel"?: boolean;
        /**
          * Hint displayed below the label and above the input field.
         */
        "hint"?: string;
        /**
          * Id + name attribute for an input element.
         */
        "inputId": string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Size attribute for an input element. Defines max-length as well.
         */
        "size"?: number;
        /**
          * Set Input types
         */
        "type"?: 'email' | 'number' | 'password' | 'search' | 'text' | 'url';
        /**
          * Call any active validators
         */
        "validate": () => Promise<void>;
        /**
          * Set event to call validator
         */
        "validateOn": 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator": Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Default value for an input element.
         */
        "value"?: string;
    }
    interface GcdsLabel {
        /**
          * Specifies if the label is hidden or not.
         */
        "hideLabel"?: boolean;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Defines the label's for attribute.
         */
        "labelFor": string;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
    }
    interface GcdsLangToggle {
        /**
          * The href attribute specifies the URL of the opposite language page
         */
        "href": string;
    }
    interface GcdsNavGroup {
        /**
          * Label for the expanded button trigger
         */
        "closeTrigger"?: string;
        /**
          * Focus button element
         */
        "focusTrigger": () => Promise<void>;
        /**
          * Label for the nav group menu
         */
        "menuLabel": string;
        /**
          * Has the nav group been expanded
         */
        "open": boolean;
        /**
          * Label for the collapsed button trigger
         */
        "openTrigger": string;
        /**
          * Toggle the nav open or closed
         */
        "toggleNav": () => Promise<void>;
    }
    interface GcdsNavLink {
        /**
          * Current page flag
         */
        "current": boolean;
        /**
          * Focus the link element
         */
        "focusLink": () => Promise<void>;
        /**
          * Link href
         */
        "href": string;
    }
    interface GcdsPagination {
        /**
          * List display - Current page number
         */
        "currentPage": number;
        /**
          * Navigation element label
         */
        "display": 'list' | 'simple';
        /**
          * Navigation element label
         */
        "label": string;
        /**
          * Simple display - href for next link
         */
        "nextHref": string;
        /**
          * Simple display - lable for next link
         */
        "nextLabel": string;
        /**
          * Function to fire when pageChange event is called
         */
        "pageChangeHandler": Function;
        /**
          * Simple display - href for previous link
         */
        "previousHref": string;
        /**
          * Simple display - label for previous link
         */
        "previousLabel": string;
        /**
          * List display - Total number of pages
         */
        "totalPages": number;
        /**
          * List display - URL object to create query strings and fragment on links
         */
        "url": string | object;
    }
    interface GcdsPhaseBanner {
        /**
          * Defines banner role.
         */
        "bannerRole"?: 'primary' | 'secondary';
        /**
          * Defines the container width of the phase banner content
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Defines if the banner's position is fixed.
         */
        "isFixed"?: boolean;
    }
    interface GcdsRadio {
        /**
          * Custom callback function on blur event
         */
        "blurHandler": Function;
        /**
          * Specifies if an input element is checked.
         */
        "checked": boolean;
        /**
          * Custom callback function on click event
         */
        "clickHandler": Function;
        /**
          * Specifies if an input element is disabled or not.
         */
        "disabled": boolean;
        /**
          * Custom callback function on focus event
         */
        "focusHandler": Function;
        /**
          * Hint displayed below the label.
         */
        "hint": string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Name attribute for an input element.
         */
        "name": string;
        /**
          * Id attribute for an input element.
         */
        "radioId": string;
        /**
          * Specifies if a form field is required or not.
         */
        "required": boolean;
        /**
          * Value for an input element.
         */
        "value": string;
    }
    interface GcdsSearch {
        /**
          * Sets the action for the search form. Default will be canada.ca global search
         */
        "action": string;
        /**
          * Set the form method of the search form
         */
        "method": 'get' | 'post';
        /**
          * Set the name of the search input
         */
        "name": string;
        /**
          * Set the placeholder and label for the search input. Becomes "Search [placeholder]"
         */
        "placeholder": string;
        /**
          * Set the name of the search input
         */
        "searchId": string;
        /**
          * Set a list of predefined search terms
         */
        "suggested": Array<string>;
    }
    interface GcdsSelect {
        /**
          * Custom callback function on blur event
         */
        "blurHandler": Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler": Function;
        /**
          * The default value is an optional value that gets displayed before the user selects an option.
         */
        "defaultValue"?: string;
        /**
          * Specifies if a select element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid select element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler": Function;
        /**
          * Hint displayed below the label.
         */
        "hint"?: string;
        /**
          * Form field label.
         */
        "label": string;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Id attribute for a select element.
         */
        "selectId": string;
        /**
          * Call any active validators
         */
        "validate": () => Promise<void>;
        /**
          * Set event to call validator
         */
        "validateOn": 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator": Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Value for a select element.
         */
        "value"?: string;
    }
    interface GcdsSideNav {
        "getNavSize": () => Promise<"desktop" | "mobile">;
        /**
          * Label for navigation landmark
         */
        "label": string;
        "updateNavItemQueue": (el: any, includeElement?: boolean) => Promise<void>;
        "updateNavSize": (size: any) => Promise<void>;
    }
    interface GcdsSignature {
        /**
          * Has link to canada.ca. Only applies to signature
         */
        "hasLink": boolean;
        /**
          * The type of graphic to render
         */
        "type": 'signature' | 'wordmark';
        /**
          * The colour variant to render
         */
        "variant": 'colour' | 'white';
    }
    interface GcdsStepper {
        /**
          * Defines the current step.
         */
        "currentStep": number;
        /**
          * Defines the total amount of steps.
         */
        "totalSteps": number;
    }
    interface GcdsTextarea {
        /**
          * Custom callback function on blur event
         */
        "blurHandler": Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler": Function;
        /**
          * Sets the maxlength attribute for the textarea element.
         */
        "characterCount"?: number;
        /**
          * Defines width for textarea cols (the min-width for textarea's is 50%).
         */
        "cols"?: number;
        /**
          * Specifies if a textarea element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid textarea element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler": Function;
        /**
          * Specifies if the label is hidden or not.
         */
        "hideLabel"?: boolean;
        /**
          * Hint displayed below the label and above the textarea field.
         */
        "hint"?: string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Default value for textarea rows.
         */
        "rows"?: number;
        /**
          * Id + name attribute for a textarea element.
         */
        "textareaId": string;
        /**
          * Call any active validators
         */
        "validate": () => Promise<void>;
        /**
          * Set event to call validator
         */
        "validateOn": 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator": Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Default value for an input element.
         */
        "value"?: string;
    }
    interface GcdsTopNav {
        /**
          * Nav alignment
         */
        "alignment": 'left' | 'center' | 'right';
        "getNavSize": () => Promise<"desktop" | "mobile">;
        /**
          * Label for navigation landmark
         */
        "label": string;
        "updateNavItemQueue": (el: any, includeElement?: boolean) => Promise<void>;
        "updateNavSize": (size: any) => Promise<void>;
    }
    interface GcdsTopicMenu {
        /**
          * Close all theme menus
         */
        "closeAllMenus": () => Promise<void>;
        "getNavSize": () => Promise<"desktop" | "mobile">;
        /**
          * Sets the homepage styling
         */
        "home": boolean;
        /**
          * Toggle open theme and topic menu
         */
        "toggleNav": () => Promise<void>;
        /**
          * Update keyboard focus queue
         */
        "updateNavItemQueue": (parent: any) => Promise<void>;
        "updateNavSize": (size: any) => Promise<void>;
    }
    interface GcdsVerifyBanner {
        /**
          * Defines the container width of the verify banner content
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Defines if the banner's position is fixed.
         */
        "isFixed"?: boolean;
    }
}
export interface GcdsAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsAlertElement;
}
export interface GcdsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsButtonElement;
}
export interface GcdsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsCheckboxElement;
}
export interface GcdsFieldsetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsFieldsetElement;
}
export interface GcdsFileUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsFileUploaderElement;
}
export interface GcdsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsInputElement;
}
export interface GcdsNavGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsNavGroupElement;
}
export interface GcdsNavLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsNavLinkElement;
}
export interface GcdsPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsPaginationElement;
}
export interface GcdsRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsRadioElement;
}
export interface GcdsSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsSearchElement;
}
export interface GcdsSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsSelectElement;
}
export interface GcdsTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGcdsTextareaElement;
}
declare global {
    interface HTMLGcdsAlertElement extends Components.GcdsAlert, HTMLStencilElement {
    }
    var HTMLGcdsAlertElement: {
        prototype: HTMLGcdsAlertElement;
        new (): HTMLGcdsAlertElement;
    };
    interface HTMLGcdsBreadcrumbsElement extends Components.GcdsBreadcrumbs, HTMLStencilElement {
    }
    var HTMLGcdsBreadcrumbsElement: {
        prototype: HTMLGcdsBreadcrumbsElement;
        new (): HTMLGcdsBreadcrumbsElement;
    };
    interface HTMLGcdsBreadcrumbsItemElement extends Components.GcdsBreadcrumbsItem, HTMLStencilElement {
    }
    var HTMLGcdsBreadcrumbsItemElement: {
        prototype: HTMLGcdsBreadcrumbsItemElement;
        new (): HTMLGcdsBreadcrumbsItemElement;
    };
    interface HTMLGcdsButtonElement extends Components.GcdsButton, HTMLStencilElement {
    }
    var HTMLGcdsButtonElement: {
        prototype: HTMLGcdsButtonElement;
        new (): HTMLGcdsButtonElement;
    };
    interface HTMLGcdsCardElement extends Components.GcdsCard, HTMLStencilElement {
    }
    var HTMLGcdsCardElement: {
        prototype: HTMLGcdsCardElement;
        new (): HTMLGcdsCardElement;
    };
    interface HTMLGcdsCheckboxElement extends Components.GcdsCheckbox, HTMLStencilElement {
    }
    var HTMLGcdsCheckboxElement: {
        prototype: HTMLGcdsCheckboxElement;
        new (): HTMLGcdsCheckboxElement;
    };
    interface HTMLGcdsContainerElement extends Components.GcdsContainer, HTMLStencilElement {
    }
    var HTMLGcdsContainerElement: {
        prototype: HTMLGcdsContainerElement;
        new (): HTMLGcdsContainerElement;
    };
    interface HTMLGcdsDateModifiedElement extends Components.GcdsDateModified, HTMLStencilElement {
    }
    var HTMLGcdsDateModifiedElement: {
        prototype: HTMLGcdsDateModifiedElement;
        new (): HTMLGcdsDateModifiedElement;
    };
    interface HTMLGcdsDetailsElement extends Components.GcdsDetails, HTMLStencilElement {
    }
    var HTMLGcdsDetailsElement: {
        prototype: HTMLGcdsDetailsElement;
        new (): HTMLGcdsDetailsElement;
    };
    interface HTMLGcdsErrorMessageElement extends Components.GcdsErrorMessage, HTMLStencilElement {
    }
    var HTMLGcdsErrorMessageElement: {
        prototype: HTMLGcdsErrorMessageElement;
        new (): HTMLGcdsErrorMessageElement;
    };
    interface HTMLGcdsErrorSummaryElement extends Components.GcdsErrorSummary, HTMLStencilElement {
    }
    var HTMLGcdsErrorSummaryElement: {
        prototype: HTMLGcdsErrorSummaryElement;
        new (): HTMLGcdsErrorSummaryElement;
    };
    interface HTMLGcdsFieldsetElement extends Components.GcdsFieldset, HTMLStencilElement {
    }
    var HTMLGcdsFieldsetElement: {
        prototype: HTMLGcdsFieldsetElement;
        new (): HTMLGcdsFieldsetElement;
    };
    interface HTMLGcdsFileUploaderElement extends Components.GcdsFileUploader, HTMLStencilElement {
    }
    var HTMLGcdsFileUploaderElement: {
        prototype: HTMLGcdsFileUploaderElement;
        new (): HTMLGcdsFileUploaderElement;
    };
    interface HTMLGcdsFooterElement extends Components.GcdsFooter, HTMLStencilElement {
    }
    var HTMLGcdsFooterElement: {
        prototype: HTMLGcdsFooterElement;
        new (): HTMLGcdsFooterElement;
    };
    interface HTMLGcdsGridElement extends Components.GcdsGrid, HTMLStencilElement {
    }
    var HTMLGcdsGridElement: {
        prototype: HTMLGcdsGridElement;
        new (): HTMLGcdsGridElement;
    };
    interface HTMLGcdsHeaderElement extends Components.GcdsHeader, HTMLStencilElement {
    }
    var HTMLGcdsHeaderElement: {
        prototype: HTMLGcdsHeaderElement;
        new (): HTMLGcdsHeaderElement;
    };
    interface HTMLGcdsHeadingElement extends Components.GcdsHeading, HTMLStencilElement {
    }
    var HTMLGcdsHeadingElement: {
        prototype: HTMLGcdsHeadingElement;
        new (): HTMLGcdsHeadingElement;
    };
    interface HTMLGcdsHintElement extends Components.GcdsHint, HTMLStencilElement {
    }
    var HTMLGcdsHintElement: {
        prototype: HTMLGcdsHintElement;
        new (): HTMLGcdsHintElement;
    };
    interface HTMLGcdsIconElement extends Components.GcdsIcon, HTMLStencilElement {
    }
    var HTMLGcdsIconElement: {
        prototype: HTMLGcdsIconElement;
        new (): HTMLGcdsIconElement;
    };
    interface HTMLGcdsInputElement extends Components.GcdsInput, HTMLStencilElement {
    }
    var HTMLGcdsInputElement: {
        prototype: HTMLGcdsInputElement;
        new (): HTMLGcdsInputElement;
    };
    interface HTMLGcdsLabelElement extends Components.GcdsLabel, HTMLStencilElement {
    }
    var HTMLGcdsLabelElement: {
        prototype: HTMLGcdsLabelElement;
        new (): HTMLGcdsLabelElement;
    };
    interface HTMLGcdsLangToggleElement extends Components.GcdsLangToggle, HTMLStencilElement {
    }
    var HTMLGcdsLangToggleElement: {
        prototype: HTMLGcdsLangToggleElement;
        new (): HTMLGcdsLangToggleElement;
    };
    interface HTMLGcdsNavGroupElement extends Components.GcdsNavGroup, HTMLStencilElement {
    }
    var HTMLGcdsNavGroupElement: {
        prototype: HTMLGcdsNavGroupElement;
        new (): HTMLGcdsNavGroupElement;
    };
    interface HTMLGcdsNavLinkElement extends Components.GcdsNavLink, HTMLStencilElement {
    }
    var HTMLGcdsNavLinkElement: {
        prototype: HTMLGcdsNavLinkElement;
        new (): HTMLGcdsNavLinkElement;
    };
    interface HTMLGcdsPaginationElement extends Components.GcdsPagination, HTMLStencilElement {
    }
    var HTMLGcdsPaginationElement: {
        prototype: HTMLGcdsPaginationElement;
        new (): HTMLGcdsPaginationElement;
    };
    interface HTMLGcdsPhaseBannerElement extends Components.GcdsPhaseBanner, HTMLStencilElement {
    }
    var HTMLGcdsPhaseBannerElement: {
        prototype: HTMLGcdsPhaseBannerElement;
        new (): HTMLGcdsPhaseBannerElement;
    };
    interface HTMLGcdsRadioElement extends Components.GcdsRadio, HTMLStencilElement {
    }
    var HTMLGcdsRadioElement: {
        prototype: HTMLGcdsRadioElement;
        new (): HTMLGcdsRadioElement;
    };
    interface HTMLGcdsSearchElement extends Components.GcdsSearch, HTMLStencilElement {
    }
    var HTMLGcdsSearchElement: {
        prototype: HTMLGcdsSearchElement;
        new (): HTMLGcdsSearchElement;
    };
    interface HTMLGcdsSelectElement extends Components.GcdsSelect, HTMLStencilElement {
    }
    var HTMLGcdsSelectElement: {
        prototype: HTMLGcdsSelectElement;
        new (): HTMLGcdsSelectElement;
    };
    interface HTMLGcdsSideNavElement extends Components.GcdsSideNav, HTMLStencilElement {
    }
    var HTMLGcdsSideNavElement: {
        prototype: HTMLGcdsSideNavElement;
        new (): HTMLGcdsSideNavElement;
    };
    interface HTMLGcdsSignatureElement extends Components.GcdsSignature, HTMLStencilElement {
    }
    var HTMLGcdsSignatureElement: {
        prototype: HTMLGcdsSignatureElement;
        new (): HTMLGcdsSignatureElement;
    };
    interface HTMLGcdsStepperElement extends Components.GcdsStepper, HTMLStencilElement {
    }
    var HTMLGcdsStepperElement: {
        prototype: HTMLGcdsStepperElement;
        new (): HTMLGcdsStepperElement;
    };
    interface HTMLGcdsTextareaElement extends Components.GcdsTextarea, HTMLStencilElement {
    }
    var HTMLGcdsTextareaElement: {
        prototype: HTMLGcdsTextareaElement;
        new (): HTMLGcdsTextareaElement;
    };
    interface HTMLGcdsTopNavElement extends Components.GcdsTopNav, HTMLStencilElement {
    }
    var HTMLGcdsTopNavElement: {
        prototype: HTMLGcdsTopNavElement;
        new (): HTMLGcdsTopNavElement;
    };
    interface HTMLGcdsTopicMenuElement extends Components.GcdsTopicMenu, HTMLStencilElement {
    }
    var HTMLGcdsTopicMenuElement: {
        prototype: HTMLGcdsTopicMenuElement;
        new (): HTMLGcdsTopicMenuElement;
    };
    interface HTMLGcdsVerifyBannerElement extends Components.GcdsVerifyBanner, HTMLStencilElement {
    }
    var HTMLGcdsVerifyBannerElement: {
        prototype: HTMLGcdsVerifyBannerElement;
        new (): HTMLGcdsVerifyBannerElement;
    };
    interface HTMLElementTagNameMap {
        "gcds-alert": HTMLGcdsAlertElement;
        "gcds-breadcrumbs": HTMLGcdsBreadcrumbsElement;
        "gcds-breadcrumbs-item": HTMLGcdsBreadcrumbsItemElement;
        "gcds-button": HTMLGcdsButtonElement;
        "gcds-card": HTMLGcdsCardElement;
        "gcds-checkbox": HTMLGcdsCheckboxElement;
        "gcds-container": HTMLGcdsContainerElement;
        "gcds-date-modified": HTMLGcdsDateModifiedElement;
        "gcds-details": HTMLGcdsDetailsElement;
        "gcds-error-message": HTMLGcdsErrorMessageElement;
        "gcds-error-summary": HTMLGcdsErrorSummaryElement;
        "gcds-fieldset": HTMLGcdsFieldsetElement;
        "gcds-file-uploader": HTMLGcdsFileUploaderElement;
        "gcds-footer": HTMLGcdsFooterElement;
        "gcds-grid": HTMLGcdsGridElement;
        "gcds-header": HTMLGcdsHeaderElement;
        "gcds-heading": HTMLGcdsHeadingElement;
        "gcds-hint": HTMLGcdsHintElement;
        "gcds-icon": HTMLGcdsIconElement;
        "gcds-input": HTMLGcdsInputElement;
        "gcds-label": HTMLGcdsLabelElement;
        "gcds-lang-toggle": HTMLGcdsLangToggleElement;
        "gcds-nav-group": HTMLGcdsNavGroupElement;
        "gcds-nav-link": HTMLGcdsNavLinkElement;
        "gcds-pagination": HTMLGcdsPaginationElement;
        "gcds-phase-banner": HTMLGcdsPhaseBannerElement;
        "gcds-radio": HTMLGcdsRadioElement;
        "gcds-search": HTMLGcdsSearchElement;
        "gcds-select": HTMLGcdsSelectElement;
        "gcds-side-nav": HTMLGcdsSideNavElement;
        "gcds-signature": HTMLGcdsSignatureElement;
        "gcds-stepper": HTMLGcdsStepperElement;
        "gcds-textarea": HTMLGcdsTextareaElement;
        "gcds-top-nav": HTMLGcdsTopNavElement;
        "gcds-topic-menu": HTMLGcdsTopicMenuElement;
        "gcds-verify-banner": HTMLGcdsVerifyBannerElement;
    }
}
declare namespace LocalJSX {
    interface GcdsAlert {
        /**
          * Defines alert role.
         */
        "alertRole"?: 'danger' | 'info' | 'success' | 'warning';
        /**
          * Defines the max width of the alert content.
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Callback when the close button is clicked.
         */
        "dismissHandler"?: Function;
        /**
          * Defines the alert heading.
         */
        "heading": string;
        /**
          * Defines if the alert's close button is displayed or not.
         */
        "hideCloseBtn"?: boolean;
        /**
          * Defines if the alert's role icon is displayed or not.
         */
        "hideRoleIcon"?: boolean;
        /**
          * Defines if the alert's position is fixed.
         */
        "isFixed"?: boolean;
        /**
          * Events
         */
        "onGcdsDismiss"?: (event: GcdsAlertCustomEvent<void>) => void;
    }
    interface GcdsBreadcrumbs {
        /**
          * Defines if the default canada.ca link is displayed or omitted.
         */
        "hideCanadaLink"?: boolean;
    }
    interface GcdsBreadcrumbsItem {
        /**
          * Specifies the href of the breadcrumb item.
         */
        "href": string | undefined;
    }
    interface GcdsButton {
        /**
          * Custom callback function on blur event
         */
        "blurHandler"?: Function;
        /**
          * The buttonId attribute specifies the id for a <button> element.
         */
        "buttonId"?: string;
        /**
          * Set the main style
         */
        "buttonRole"?: | 'primary'
    | 'secondary'
    | 'danger'
    | 'skip-to-content';
        /**
          * Set the style variant
         */
        "buttonStyle"?: 'solid' | 'text-only';
        /**
          * Custom callback function on click event
         */
        "clickHandler"?: Function;
        /**
          * The disabled attribute for a <button> element.
         */
        "disabled"?: boolean;
        /**
          * The download attribute specifies that the target (the file specified in the href attribute) will be downloaded when a user clicks on the hyperlink
         */
        "download"?: string | undefined;
        /**
          * Custom callback function on focus event
         */
        "focusHandler"?: Function;
        /**
          * The href attribute specifies the URL of the page the link goes to
         */
        "href"?: string | undefined;
        /**
          * The name attribute specifies the name for a <button> element.
         */
        "name"?: string | undefined;
        /**
          * Emitted when the button loses focus.
         */
        "onGcdsBlur"?: (event: GcdsButtonCustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onGcdsFocus"?: (event: GcdsButtonCustomEvent<void>) => void;
        /**
          * The rel attribute specifies the relationship between the current document and the linked document
         */
        "rel"?: string | undefined;
        /**
          * Set the button size
         */
        "size"?: 'regular' | 'small';
        /**
          * The target attribute specifies where to open the linked document
         */
        "target"?: string | undefined;
        /**
          * Set button types
         */
        "type"?: 'submit' | 'reset' | 'button' | 'link';
    }
    interface GcdsCard {
        /**
          * The card title attribute specifies the title that appears on the card
         */
        "cardTitle": string;
        /**
          * The description attribute specifies the body of text that appears on the card
         */
        "description"?: string;
        /**
          * The href attribute specifies the URL of the page the link goes to
         */
        "href": string;
        /**
          * The img alt attribute specifies the alt text for the image provided, if none, image will be decorative
         */
        "imgAlt"?: string;
        /**
          * The img src attribute specifies the path to the image
         */
        "imgSrc"?: string;
        /**
          * The tag attribute specifies the tag text that appears above the card title
         */
        "tag"?: string;
        /**
          * The title element attribute specifies HTML element the title renders as
         */
        "titleElement"?: 'h3' | 'h4' | 'h5' | 'h6' | 'a';
        /**
          * The type attribute specifies how the card renders as a link
         */
        "type"?: 'link' | 'action';
    }
    interface GcdsCheckbox {
        /**
          * Custom callback function on blur event
         */
        "blurHandler"?: Function;
        /**
          * Id attribute for an input element.
         */
        "checkboxId": string;
        /**
          * Specifies if an input element is checked.
         */
        "checked"?: boolean;
        /**
          * Custom callback function on click event
         */
        "clickHandler"?: Function;
        /**
          * Specifies if an input element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid input element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler"?: Function;
        /**
          * Hint displayed below the label.
         */
        "hint"?: string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Name attribute for an input element.
         */
        "name": string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onGcdsBlur"?: (event: GcdsCheckboxCustomEvent<void>) => void;
        /**
          * Update value based on user input.
         */
        "onGcdsChange"?: (event: GcdsCheckboxCustomEvent<any>) => void;
        /**
          * Emitted when the input has a validation error.
         */
        "onGcdsError"?: (event: GcdsCheckboxCustomEvent<object>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onGcdsFocus"?: (event: GcdsCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the input has a validation error.
         */
        "onGcdsValid"?: (event: GcdsCheckboxCustomEvent<object>) => void;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Set event to call validator
         */
        "validateOn"?: 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator"?: Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Value for an input element.
         */
        "value"?: string;
    }
    interface GcdsContainer {
        /**
          * Defines if container has a border or not.
         */
        "border"?: boolean;
        /**
          * Defines if container is centered or not.
         */
        "centered"?: boolean;
        /**
          * Defines the container's margin. Note that left and right margin will not be applied if the container is centered.
         */
        "margin"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Defines the container's padding.
         */
        "padding"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Defines container size.
         */
        "size"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Set tag for container.
         */
        "tag"?: string;
    }
    interface GcdsDateModified {
        /**
          * Set date modified type. Default is date.
         */
        "type"?: 'date' | 'version';
    }
    interface GcdsDetails {
        /**
          * The details title summarizes the panel content.
         */
        "detailsTitle": string;
        /**
          * Defines if the details panel is open by default or not.
         */
        "open"?: boolean;
    }
    interface GcdsErrorMessage {
        /**
          * Error message for an invalid form field.
         */
        "message": string;
        /**
          * Id attribute for the error message.
         */
        "messageId": string;
    }
    interface GcdsErrorSummary {
        /**
          * Object of list items for error list. Format: { link-href: link-label }
         */
        "errorLinks"?: string | object;
        /**
          * Set error summary heading
         */
        "heading"?: string;
        /**
          * Specifies if the error summary should listen for GcdsError event to generate error list.
         */
        "listen"?: boolean;
    }
    interface GcdsFieldset {
        /**
          * Flag to disable fieldset and its contents
         */
        "disabled"?: boolean;
        /**
          * Error message for invalid form elements in group.
         */
        "errorMessage"?: string;
        /**
          * The unique identifier for the component
         */
        "fieldsetId": string;
        /**
          * Hint displayed below the legend.
         */
        "hint"?: string;
        /**
          * The title for the contents of the fieldset
         */
        "legend": string;
        /**
          * Emitted when the fieldset has a validation error.
         */
        "onGcdsError"?: (event: GcdsFieldsetCustomEvent<object>) => void;
        /**
          * Emitted when the fieldset has a validation error.
         */
        "onGcdsGroupError"?: (event: GcdsFieldsetCustomEvent<string>) => void;
        /**
          * Emitted when the fieldset has a validation error.
         */
        "onGcdsGroupErrorClear"?: (event: GcdsFieldsetCustomEvent<void>) => void;
        /**
          * Emitted when the fieldset has a validation error.
         */
        "onGcdsValid"?: (event: GcdsFieldsetCustomEvent<object>) => void;
        /**
          * Flag the contents are required
         */
        "required"?: boolean;
        /**
          * Set event to call validator
         */
        "validateOn"?: 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator"?: Array<
    string | ValidatorEntry | Validator<string>
  >;
    }
    interface GcdsFileUploader {
        /**
          * Defines the file types the file uploader accepts.
         */
        "accept"?: string;
        /**
          * Custom callback function on blur event
         */
        "blurHandler"?: Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler"?: Function;
        /**
          * Specifies if a file uploader element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid file uploader element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler"?: Function;
        /**
          * Hint displayed below the label.
         */
        "hint"?: string;
        /**
          * Form field label.
         */
        "label": string;
        /**
          * Boolean that specifies if the user is allowed to select more than one file.
         */
        "multiple"?: boolean;
        /**
          * Emitted when the uploader loses focus.
         */
        "onGcdsBlur"?: (event: GcdsFileUploaderCustomEvent<void>) => void;
        /**
          * Emitted when the input has a validation error.
         */
        "onGcdsError"?: (event: GcdsFileUploaderCustomEvent<object>) => void;
        /**
          * Update value based on user selection.
         */
        "onGcdsFileUploaderChange"?: (event: GcdsFileUploaderCustomEvent<any>) => void;
        /**
          * Emitted when the uploader has focus.
         */
        "onGcdsFocus"?: (event: GcdsFileUploaderCustomEvent<void>) => void;
        /**
          * Remove file and update value.
         */
        "onGcdsRemoveFile"?: (event: GcdsFileUploaderCustomEvent<any>) => void;
        /**
          * Emitted when the input has a validation error.
         */
        "onGcdsValid"?: (event: GcdsFileUploaderCustomEvent<object>) => void;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Id attribute for a file uploader element.
         */
        "uploaderId": string;
        /**
          * Set event to call validator
         */
        "validateOn"?: 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator"?: Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Value for a file uploader element.
         */
        "value"?: string[];
    }
    interface GcdsFooter {
        /**
          * Heading for contextual slot and nav landmark
         */
        "contextualHeading"?: string;
        /**
          * Object of list items for contextual band. Format: { link-label: link-href }
         */
        "contextualLinks"?: string | object;
        /**
          * Display mode of the footer
         */
        "display"?: 'compact' | 'full';
        /**
          * Object of list items for sub-footer. Format: { link-label: link-href }
         */
        "subLinks"?: string | object;
        /**
          * GcdsSignature - The variant of the Government of Canada wordmark
         */
        "wordmarkVariant"?: 'colour' | 'white';
    }
    interface GcdsGrid {
        /**
          * If total grid size is less than the size of its grid container, this property aligns the grid along the block (column) axis
         */
        "alignContent"?: | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly'
    | 'start'
    | 'stretch';
        /**
          * Aligns grid items along the block (column) axis
         */
        "alignItems"?: 'baseline' | 'center' | 'end' | 'start' | 'stretch';
        /**
          * Defines if grid container is centered or not
         */
        "centered"?: boolean;
        /**
          * Defines the columns of the grid Option to set different layouts for desktop | tablet | default (includes mobile)
         */
        "columns": string;
        "columnsDesktop"?: string;
        "columnsTablet"?: string;
        /**
          * Defines grid container size
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Defines element as grid or inline-grid container
         */
        "display"?: 'grid' | 'inline-grid';
        /**
          * Shorthand for column-gap + row-gap Specifies the width of the gutters between columns and rows
         */
        "gap"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * If total grid size is less than the size of its grid container, this property aligns the grid along the inline (row) axis
         */
        "justifyContent"?: | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly'
    | 'start'
    | 'stretch';
        /**
          * Aligns grid items along the inline (row) axis
         */
        "justifyItems"?: 'center' | 'end' | 'start' | 'stretch';
        /**
          * Sets both the align-content + justify-content properties
         */
        "placeContent"?: | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly'
    | 'start'
    | 'stretch';
        /**
          * Sets both the align-items + justify-items properties
         */
        "placeItems"?: 'center' | 'end' | 'start' | 'stretch';
        /**
          * Set tag for grid container
         */
        "tag"?: string;
    }
    interface GcdsHeader {
        /**
          * GcdsLangToggle - The href attribute specifies the URL of the opposite language page
         */
        "langHref": string;
        /**
          * GcdsSignature - GCDS signature links to Canada.ca
         */
        "signatureHasLink"?: boolean;
        /**
          * GcdsSignature - The variant of the Government of Canada signature
         */
        "signatureVariant"?: | 'colour'
    | 'white';
        /**
          * Top navigation - Skip to content href
         */
        "skipToHref": string;
    }
    interface GcdsHeading {
        /**
          * Sets the line length to a maximum amount of characters per line for each heading level, ensuring a comfortable, accessible reading length.
         */
        "characterLimit"?: boolean;
        /**
          * Adds margin below the heading.
         */
        "marginBottom"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Adds margin above the heading.
         */
        "marginTop"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Sets the appropriate HTML tag for the selected level.
         */
        "tag": 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface GcdsHint {
        /**
          * Hint displayed below the label and above the input field.
         */
        "hint"?: string;
        /**
          * Id attribute for the hint.
         */
        "hintId"?: string;
    }
    interface GcdsIcon {
        /**
          * If the icon should render as a fixed-width square, or their natural width.
         */
        "fixedWidth"?: boolean;
        /**
          * Style of the icon. 'regular' icons are outlined. Some icons have 'solid' variation.
         */
        "iconStyle"?: 'regular' | 'solid';
        /**
          * Add icon description.
         */
        "label"?: string;
        /**
          * Add margin to the left of the icon
         */
        "marginLeft"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Add margin to the right of the icon
         */
        "marginRight"?: | '0'
    | '50'
    | '100'
    | '150'
    | '200'
    | '250'
    | '300'
    | '400'
    | '450'
    | '500'
    | '550'
    | '600'
    | '700'
    | '800'
    | '900'
    | '1000';
        /**
          * Name of the icon.
         */
        "name": string;
        /**
          * Defines the size of the icon.
         */
        "size"?: | 'inherit'
    | 'caption'
    | 'text'
    | 'h6'
    | 'h5'
    | 'h4'
    | 'h3'
    | 'h2'
    | 'h1';
    }
    interface GcdsInput {
        /**
          * String to have autocomplete enabled
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Custom callback function on blur event
         */
        "blurHandler"?: Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler"?: Function;
        /**
          * Specifies if an input element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid input element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler"?: Function;
        /**
          * Specifies if the label is hidden or not.
         */
        "hideLabel"?: boolean;
        /**
          * Hint displayed below the label and above the input field.
         */
        "hint"?: string;
        /**
          * Id + name attribute for an input element.
         */
        "inputId": string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Emitted when the input loses focus.
         */
        "onGcdsBlur"?: (event: GcdsInputCustomEvent<void>) => void;
        /**
          * Update value based on user input.
         */
        "onGcdsChange"?: (event: GcdsInputCustomEvent<any>) => void;
        /**
          * Emitted when the input has a validation error.
         */
        "onGcdsError"?: (event: GcdsInputCustomEvent<object>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGcdsFocus"?: (event: GcdsInputCustomEvent<void>) => void;
        /**
          * Emitted when the input has a validation error.
         */
        "onGcdsValid"?: (event: GcdsInputCustomEvent<object>) => void;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Size attribute for an input element. Defines max-length as well.
         */
        "size"?: number;
        /**
          * Set Input types
         */
        "type"?: 'email' | 'number' | 'password' | 'search' | 'text' | 'url';
        /**
          * Set event to call validator
         */
        "validateOn"?: 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator"?: Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Default value for an input element.
         */
        "value"?: string;
    }
    interface GcdsLabel {
        /**
          * Specifies if the label is hidden or not.
         */
        "hideLabel"?: boolean;
        /**
          * Form field label
         */
        "label"?: string;
        /**
          * Defines the label's for attribute.
         */
        "labelFor"?: string;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
    }
    interface GcdsLangToggle {
        /**
          * The href attribute specifies the URL of the opposite language page
         */
        "href": string;
    }
    interface GcdsNavGroup {
        /**
          * Label for the expanded button trigger
         */
        "closeTrigger"?: string;
        /**
          * Label for the nav group menu
         */
        "menuLabel": string;
        /**
          * Emitted when the button has focus.
         */
        "onGcdsClick"?: (event: GcdsNavGroupCustomEvent<void>) => void;
        /**
          * Has the nav group been expanded
         */
        "open"?: boolean;
        /**
          * Label for the collapsed button trigger
         */
        "openTrigger": string;
    }
    interface GcdsNavLink {
        /**
          * Current page flag
         */
        "current"?: boolean;
        /**
          * Link href
         */
        "href": string;
        /**
          * Emitted when the link loses focus.
         */
        "onGcdsBlur"?: (event: GcdsNavLinkCustomEvent<void>) => void;
        /**
          * Emitted when the link has been clicked.
         */
        "onGcdsClick"?: (event: GcdsNavLinkCustomEvent<void>) => void;
        /**
          * Emitted when the link has focus.
         */
        "onGcdsFocus"?: (event: GcdsNavLinkCustomEvent<void>) => void;
    }
    interface GcdsPagination {
        /**
          * List display - Current page number
         */
        "currentPage"?: number;
        /**
          * Navigation element label
         */
        "display"?: 'list' | 'simple';
        /**
          * Navigation element label
         */
        "label": string;
        /**
          * Simple display - href for next link
         */
        "nextHref"?: string;
        /**
          * Simple display - lable for next link
         */
        "nextLabel"?: string;
        /**
          * Update value based on user input.
         */
        "onGcdsPageChange"?: (event: GcdsPaginationCustomEvent<void>) => void;
        /**
          * Function to fire when pageChange event is called
         */
        "pageChangeHandler"?: Function;
        /**
          * Simple display - href for previous link
         */
        "previousHref"?: string;
        /**
          * Simple display - label for previous link
         */
        "previousLabel"?: string;
        /**
          * List display - Total number of pages
         */
        "totalPages"?: number;
        /**
          * List display - URL object to create query strings and fragment on links
         */
        "url"?: string | object;
    }
    interface GcdsPhaseBanner {
        /**
          * Defines banner role.
         */
        "bannerRole"?: 'primary' | 'secondary';
        /**
          * Defines the container width of the phase banner content
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Defines if the banner's position is fixed.
         */
        "isFixed"?: boolean;
    }
    interface GcdsRadio {
        /**
          * Custom callback function on blur event
         */
        "blurHandler"?: Function;
        /**
          * Specifies if an input element is checked.
         */
        "checked"?: boolean;
        /**
          * Custom callback function on click event
         */
        "clickHandler"?: Function;
        /**
          * Specifies if an input element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Custom callback function on focus event
         */
        "focusHandler"?: Function;
        /**
          * Hint displayed below the label.
         */
        "hint"?: string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Name attribute for an input element.
         */
        "name": string;
        /**
          * Emitted when the radio loses focus.
         */
        "onGcdsBlur"?: (event: GcdsRadioCustomEvent<void>) => void;
        /**
          * Emitted when the radio has focus.
         */
        "onGcdsFocus"?: (event: GcdsRadioCustomEvent<void>) => void;
        /**
          * Emitted when the radio button is checked
         */
        "onGcdsRadioChange"?: (event: GcdsRadioCustomEvent<void>) => void;
        /**
          * Id attribute for an input element.
         */
        "radioId": string;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Value for an input element.
         */
        "value"?: string;
    }
    interface GcdsSearch {
        /**
          * Sets the action for the search form. Default will be canada.ca global search
         */
        "action"?: string;
        /**
          * Set the form method of the search form
         */
        "method"?: 'get' | 'post';
        /**
          * Set the name of the search input
         */
        "name"?: string;
        /**
          * Emitted when the search input has lost focus.
         */
        "onGcdsBlur"?: (event: GcdsSearchCustomEvent<object>) => void;
        /**
          * Emitted when the search input value has changed.
         */
        "onGcdsChange"?: (event: GcdsSearchCustomEvent<object>) => void;
        /**
          * Emitted when the search input value has gained focus.
         */
        "onGcdsFocus"?: (event: GcdsSearchCustomEvent<object>) => void;
        /**
          * Emitted when the search form has submitted.
         */
        "onGcdsSubmit"?: (event: GcdsSearchCustomEvent<object>) => void;
        /**
          * Set the placeholder and label for the search input. Becomes "Search [placeholder]"
         */
        "placeholder"?: string;
        /**
          * Set the name of the search input
         */
        "searchId"?: string;
        /**
          * Set a list of predefined search terms
         */
        "suggested"?: Array<string>;
    }
    interface GcdsSelect {
        /**
          * Custom callback function on blur event
         */
        "blurHandler"?: Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler"?: Function;
        /**
          * The default value is an optional value that gets displayed before the user selects an option.
         */
        "defaultValue"?: string;
        /**
          * Specifies if a select element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid select element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler"?: Function;
        /**
          * Hint displayed below the label.
         */
        "hint"?: string;
        /**
          * Form field label.
         */
        "label": string;
        /**
          * Emitted when the select loses focus.
         */
        "onGcdsBlur"?: (event: GcdsSelectCustomEvent<void>) => void;
        /**
          * Emitted when the select has a validation error.
         */
        "onGcdsError"?: (event: GcdsSelectCustomEvent<object>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onGcdsFocus"?: (event: GcdsSelectCustomEvent<void>) => void;
        /**
          * Update value based on user selection.
         */
        "onGcdsSelectChange"?: (event: GcdsSelectCustomEvent<any>) => void;
        /**
          * Emitted when the select has a validation error.
         */
        "onGcdsValid"?: (event: GcdsSelectCustomEvent<object>) => void;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Id attribute for a select element.
         */
        "selectId": string;
        /**
          * Set event to call validator
         */
        "validateOn"?: 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator"?: Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Value for a select element.
         */
        "value"?: string;
    }
    interface GcdsSideNav {
        /**
          * Label for navigation landmark
         */
        "label": string;
    }
    interface GcdsSignature {
        /**
          * Has link to canada.ca. Only applies to signature
         */
        "hasLink"?: boolean;
        /**
          * The type of graphic to render
         */
        "type"?: 'signature' | 'wordmark';
        /**
          * The colour variant to render
         */
        "variant"?: 'colour' | 'white';
    }
    interface GcdsStepper {
        /**
          * Defines the current step.
         */
        "currentStep": number;
        /**
          * Defines the total amount of steps.
         */
        "totalSteps": number;
    }
    interface GcdsTextarea {
        /**
          * Custom callback function on blur event
         */
        "blurHandler"?: Function;
        /**
          * Custom callback function on change event
         */
        "changeHandler"?: Function;
        /**
          * Sets the maxlength attribute for the textarea element.
         */
        "characterCount"?: number;
        /**
          * Defines width for textarea cols (the min-width for textarea's is 50%).
         */
        "cols"?: number;
        /**
          * Specifies if a textarea element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Error message for an invalid textarea element.
         */
        "errorMessage"?: string;
        /**
          * Custom callback function on focus event
         */
        "focusHandler"?: Function;
        /**
          * Specifies if the label is hidden or not.
         */
        "hideLabel"?: boolean;
        /**
          * Hint displayed below the label and above the textarea field.
         */
        "hint"?: string;
        /**
          * Form field label
         */
        "label": string;
        /**
          * Emitted when the textarea loses focus.
         */
        "onGcdsBlur"?: (event: GcdsTextareaCustomEvent<void>) => void;
        /**
          * Update value based on user input.
         */
        "onGcdsChange"?: (event: GcdsTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the textarea has a validation error.
         */
        "onGcdsError"?: (event: GcdsTextareaCustomEvent<object>) => void;
        /**
          * Emitted when the textarea has focus.
         */
        "onGcdsFocus"?: (event: GcdsTextareaCustomEvent<void>) => void;
        /**
          * Emitted when the textarea has a validation error.
         */
        "onGcdsValid"?: (event: GcdsTextareaCustomEvent<object>) => void;
        /**
          * Specifies if a form field is required or not.
         */
        "required"?: boolean;
        /**
          * Default value for textarea rows.
         */
        "rows"?: number;
        /**
          * Id + name attribute for a textarea element.
         */
        "textareaId": string;
        /**
          * Set event to call validator
         */
        "validateOn"?: 'blur' | 'submit' | 'other';
        /**
          * Array of validators
         */
        "validator"?: Array<
    string | ValidatorEntry | Validator<string>
  >;
        /**
          * Default value for an input element.
         */
        "value"?: string;
    }
    interface GcdsTopNav {
        /**
          * Nav alignment
         */
        "alignment"?: 'left' | 'center' | 'right';
        /**
          * Label for navigation landmark
         */
        "label": string;
    }
    interface GcdsTopicMenu {
        /**
          * Sets the homepage styling
         */
        "home"?: boolean;
    }
    interface GcdsVerifyBanner {
        /**
          * Defines the container width of the verify banner content
         */
        "container"?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs';
        /**
          * Defines if the banner's position is fixed.
         */
        "isFixed"?: boolean;
    }
    interface IntrinsicElements {
        "gcds-alert": GcdsAlert;
        "gcds-breadcrumbs": GcdsBreadcrumbs;
        "gcds-breadcrumbs-item": GcdsBreadcrumbsItem;
        "gcds-button": GcdsButton;
        "gcds-card": GcdsCard;
        "gcds-checkbox": GcdsCheckbox;
        "gcds-container": GcdsContainer;
        "gcds-date-modified": GcdsDateModified;
        "gcds-details": GcdsDetails;
        "gcds-error-message": GcdsErrorMessage;
        "gcds-error-summary": GcdsErrorSummary;
        "gcds-fieldset": GcdsFieldset;
        "gcds-file-uploader": GcdsFileUploader;
        "gcds-footer": GcdsFooter;
        "gcds-grid": GcdsGrid;
        "gcds-header": GcdsHeader;
        "gcds-heading": GcdsHeading;
        "gcds-hint": GcdsHint;
        "gcds-icon": GcdsIcon;
        "gcds-input": GcdsInput;
        "gcds-label": GcdsLabel;
        "gcds-lang-toggle": GcdsLangToggle;
        "gcds-nav-group": GcdsNavGroup;
        "gcds-nav-link": GcdsNavLink;
        "gcds-pagination": GcdsPagination;
        "gcds-phase-banner": GcdsPhaseBanner;
        "gcds-radio": GcdsRadio;
        "gcds-search": GcdsSearch;
        "gcds-select": GcdsSelect;
        "gcds-side-nav": GcdsSideNav;
        "gcds-signature": GcdsSignature;
        "gcds-stepper": GcdsStepper;
        "gcds-textarea": GcdsTextarea;
        "gcds-top-nav": GcdsTopNav;
        "gcds-topic-menu": GcdsTopicMenu;
        "gcds-verify-banner": GcdsVerifyBanner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gcds-alert": LocalJSX.GcdsAlert & JSXBase.HTMLAttributes<HTMLGcdsAlertElement>;
            "gcds-breadcrumbs": LocalJSX.GcdsBreadcrumbs & JSXBase.HTMLAttributes<HTMLGcdsBreadcrumbsElement>;
            "gcds-breadcrumbs-item": LocalJSX.GcdsBreadcrumbsItem & JSXBase.HTMLAttributes<HTMLGcdsBreadcrumbsItemElement>;
            "gcds-button": LocalJSX.GcdsButton & JSXBase.HTMLAttributes<HTMLGcdsButtonElement>;
            "gcds-card": LocalJSX.GcdsCard & JSXBase.HTMLAttributes<HTMLGcdsCardElement>;
            "gcds-checkbox": LocalJSX.GcdsCheckbox & JSXBase.HTMLAttributes<HTMLGcdsCheckboxElement>;
            "gcds-container": LocalJSX.GcdsContainer & JSXBase.HTMLAttributes<HTMLGcdsContainerElement>;
            "gcds-date-modified": LocalJSX.GcdsDateModified & JSXBase.HTMLAttributes<HTMLGcdsDateModifiedElement>;
            "gcds-details": LocalJSX.GcdsDetails & JSXBase.HTMLAttributes<HTMLGcdsDetailsElement>;
            "gcds-error-message": LocalJSX.GcdsErrorMessage & JSXBase.HTMLAttributes<HTMLGcdsErrorMessageElement>;
            "gcds-error-summary": LocalJSX.GcdsErrorSummary & JSXBase.HTMLAttributes<HTMLGcdsErrorSummaryElement>;
            "gcds-fieldset": LocalJSX.GcdsFieldset & JSXBase.HTMLAttributes<HTMLGcdsFieldsetElement>;
            "gcds-file-uploader": LocalJSX.GcdsFileUploader & JSXBase.HTMLAttributes<HTMLGcdsFileUploaderElement>;
            "gcds-footer": LocalJSX.GcdsFooter & JSXBase.HTMLAttributes<HTMLGcdsFooterElement>;
            "gcds-grid": LocalJSX.GcdsGrid & JSXBase.HTMLAttributes<HTMLGcdsGridElement>;
            "gcds-header": LocalJSX.GcdsHeader & JSXBase.HTMLAttributes<HTMLGcdsHeaderElement>;
            "gcds-heading": LocalJSX.GcdsHeading & JSXBase.HTMLAttributes<HTMLGcdsHeadingElement>;
            "gcds-hint": LocalJSX.GcdsHint & JSXBase.HTMLAttributes<HTMLGcdsHintElement>;
            "gcds-icon": LocalJSX.GcdsIcon & JSXBase.HTMLAttributes<HTMLGcdsIconElement>;
            "gcds-input": LocalJSX.GcdsInput & JSXBase.HTMLAttributes<HTMLGcdsInputElement>;
            "gcds-label": LocalJSX.GcdsLabel & JSXBase.HTMLAttributes<HTMLGcdsLabelElement>;
            "gcds-lang-toggle": LocalJSX.GcdsLangToggle & JSXBase.HTMLAttributes<HTMLGcdsLangToggleElement>;
            "gcds-nav-group": LocalJSX.GcdsNavGroup & JSXBase.HTMLAttributes<HTMLGcdsNavGroupElement>;
            "gcds-nav-link": LocalJSX.GcdsNavLink & JSXBase.HTMLAttributes<HTMLGcdsNavLinkElement>;
            "gcds-pagination": LocalJSX.GcdsPagination & JSXBase.HTMLAttributes<HTMLGcdsPaginationElement>;
            "gcds-phase-banner": LocalJSX.GcdsPhaseBanner & JSXBase.HTMLAttributes<HTMLGcdsPhaseBannerElement>;
            "gcds-radio": LocalJSX.GcdsRadio & JSXBase.HTMLAttributes<HTMLGcdsRadioElement>;
            "gcds-search": LocalJSX.GcdsSearch & JSXBase.HTMLAttributes<HTMLGcdsSearchElement>;
            "gcds-select": LocalJSX.GcdsSelect & JSXBase.HTMLAttributes<HTMLGcdsSelectElement>;
            "gcds-side-nav": LocalJSX.GcdsSideNav & JSXBase.HTMLAttributes<HTMLGcdsSideNavElement>;
            "gcds-signature": LocalJSX.GcdsSignature & JSXBase.HTMLAttributes<HTMLGcdsSignatureElement>;
            "gcds-stepper": LocalJSX.GcdsStepper & JSXBase.HTMLAttributes<HTMLGcdsStepperElement>;
            "gcds-textarea": LocalJSX.GcdsTextarea & JSXBase.HTMLAttributes<HTMLGcdsTextareaElement>;
            "gcds-top-nav": LocalJSX.GcdsTopNav & JSXBase.HTMLAttributes<HTMLGcdsTopNavElement>;
            "gcds-topic-menu": LocalJSX.GcdsTopicMenu & JSXBase.HTMLAttributes<HTMLGcdsTopicMenuElement>;
            "gcds-verify-banner": LocalJSX.GcdsVerifyBanner & JSXBase.HTMLAttributes<HTMLGcdsVerifyBannerElement>;
        }
    }
}

"use strict";(self.webpackChunk_cdssnc_gcds_components=self.webpackChunk_cdssnc_gcds_components||[]).push([[7899],{"./src/components/gcds-radio/stories/gcds-radio.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Checked:()=>Checked,Default:()=>Default,Disabled:()=>Disabled,Error:()=>Error,Playground:()=>Playground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Radio",parameters:{actions:{argTypesRegex:"^gcds.*",handles:["RadioChange","focus","blur"]}},argTypes:{radioId:{name:"radio-id",control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}},type:{required:!0}},name:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}},type:{required:!0}},checked:{control:{type:"select"},options:[!1,!0],table:{type:{summary:"boolean"},defaultValue:{summary:!1}}},disabled:{control:{type:"select"},options:[!1,!0],table:{type:{summary:"boolean"},defaultValue:{summary:!1}}},hint:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}}},label:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}},type:{required:!0}},required:{control:{type:"select"},options:[!1,!0],table:{type:{summary:"boolean"},defaultValue:{summary:!1}}},value:{control:"text",table:{type:{summary:"string"},defaultValue:{summary:"-"}}},...__webpack_require__("./src/utils/storybook/component-properties.js").langProp,gcdsRadioChange:{action:"RadioChnage",table:{category:"Events | Événements"}},gcdsFocus:{action:"focus",table:{category:"Events | Événements"}},gcdsBlur:{action:"blur",table:{category:"Events | Événements"}}}},Template=args=>`\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radio\n  radio-id="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint?`hint="${args.hint}"`:null}\n  ${args.required?"required":null}\n  ${args.disabled?"disabled":null}\n  ${args.value?`value="${args.value}"`:null}\n  ${args.checked?"checked":null}\n  ${"en"!=args.lang?`lang="${args.lang}"`:null}\n>\n</gcds-radio>\n\n\x3c!-- React code --\x3e\n<GcdsRadio\n  radioId="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint?`hint="${args.hint}"`:null}\n  ${args.required?"required":null}\n  ${args.disabled?"disabled":null}\n  ${args.value?`value="${args.value}"`:null}\n  ${args.checked?"checked":null}\n  ${"en"!=args.lang?`lang="${args.lang}"`:null}\n>\n</GcdsRadio>\n`.replace(/\s\snull\n/g,""),Default=Template.bind({});Default.args={radioId:"radio",label:"Label",name:"radioDefault",hint:"Description or example to make the option clearer.",required:!1,disabled:!1,value:"",checked:!1,lang:"en"};const Disabled=Template.bind({});Disabled.args={radioId:"radioCDisabled",label:"Label",name:"radio",hint:"Description or example to make the option clearer.",required:!1,disabled:!0,value:"",checked:!1,lang:"en"};const Checked=Template.bind({});Checked.args={radioId:"radioChecked",label:"Label",name:"radio",hint:"Description or example to make the option clearer.",required:!1,disabled:!1,value:"",checked:!0,lang:"en"};const Error=(args=>`\n<gcds-fieldset\n  legend="Fieldset legend"\n  fieldset-id="fieldset"\n  error-message="Choose an option to continue."\n  hint="Radio buttons only validate in fieldset"\n  required\n>\n  <gcds-radio\n    radio-id="${args.radioId}1"\n    label="${args.label}"\n    name="${args.name}"\n    ${args.hint?`hint="${args.hint}"`:null}\n    ${args.value?`value="${args.value}1"`:null}\n    ${"en"!=args.lang?`lang="${args.lang}"`:null}\n  >\n  </gcds-radio>\n  <gcds-radio\n    radio-id="${args.radioId}2"\n    label="${args.label}"\n    name="${args.name}"\n    ${args.hint?`hint="${args.hint}"`:null}\n    ${args.value?`value="${args.value}2"`:null}\n    ${"en"!=args.lang?`lang="${args.lang}"`:null}\n  >\n  </gcds-radio>\n</gcds-fieldset>\n`.replace(/\s\snull\n/g,"")).bind({});Error.args={radioId:"radio",label:"Label",name:"radioDefault",hint:"Description or example to make the option clearer.",required:!1,disabled:!1,value:"",checked:!1,lang:"en"};const Playground=(args=>`\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radio\n  radio-id="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint?`hint="${args.hint}"`:null}\n  ${args.required?"required":null}\n  ${args.disabled?"disabled":null}\n  ${args.value?`value="${args.value}"`:null}\n  ${args.checked?"checked":null}\n  ${"en"!=args.lang?`lang="${args.lang}"`:null}\n>\n</gcds-radio>\n`.replace(/\s\snull\n/g,"")).bind({});Playground.args={radioId:"radio",label:"Label",name:"radio",hint:"Description or example to make the option clearer.",required:!1,disabled:!1,value:"",checked:!1,lang:"en"},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radio\n  radio-id="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.checked ? `checked` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radio>\n\n\x3c!-- React code --\x3e\n<GcdsRadio\n  radioId="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.checked ? `checked` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadio>\n`.replace(/\\s\\snull\\n/g, \'\')',...Default.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radio\n  radio-id="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.checked ? `checked` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radio>\n\n\x3c!-- React code --\x3e\n<GcdsRadio\n  radioId="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.checked ? `checked` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadio>\n`.replace(/\\s\\snull\\n/g, \'\')',...Disabled.parameters?.docs?.source}}},Checked.parameters={...Checked.parameters,docs:{...Checked.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radio\n  radio-id="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.checked ? `checked` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radio>\n\n\x3c!-- React code --\x3e\n<GcdsRadio\n  radioId="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.checked ? `checked` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</GcdsRadio>\n`.replace(/\\s\\snull\\n/g, \'\')',...Checked.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:'args => `\n<gcds-fieldset\n  legend="Fieldset legend"\n  fieldset-id="fieldset"\n  error-message="Choose an option to continue."\n  hint="Radio buttons only validate in fieldset"\n  required\n>\n  <gcds-radio\n    radio-id="${args.radioId}1"\n    label="${args.label}"\n    name="${args.name}"\n    ${args.hint ? `hint="${args.hint}"` : null}\n    ${args.value ? `value="${args.value}1"` : null}\n    ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n  >\n  </gcds-radio>\n  <gcds-radio\n    radio-id="${args.radioId}2"\n    label="${args.label}"\n    name="${args.name}"\n    ${args.hint ? `hint="${args.hint}"` : null}\n    ${args.value ? `value="${args.value}2"` : null}\n    ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n  >\n  </gcds-radio>\n</gcds-fieldset>\n`.replace(/\\s\\snull\\n/g, \'\')',...Error.parameters?.docs?.source}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'args => `\n\x3c!-- Web component code (Angular, Vue) --\x3e\n<gcds-radio\n  radio-id="${args.radioId}"\n  label="${args.label}"\n  name="${args.name}"\n  ${args.hint ? `hint="${args.hint}"` : null}\n  ${args.required ? `required` : null}\n  ${args.disabled ? `disabled` : null}\n  ${args.value ? `value="${args.value}"` : null}\n  ${args.checked ? `checked` : null}\n  ${args.lang != \'en\' ? `lang="${args.lang}"` : null}\n>\n</gcds-radio>\n`.replace(/\\s\\snull\\n/g, \'\')',...Playground.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Disabled","Checked","Error","Playground"]},"./src/utils/storybook/component-properties.js":()=>{}}]);